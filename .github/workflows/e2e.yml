name: End-to-End Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'e2e/**'
      - 'app.py'
      - 'templates/**'
      - 'static/**'
      - 'tests/**'
      - 'playwright.config.js'
  pull_request:
    branches: [ main ]
    paths:
      - 'e2e/**'
      - 'app.py'
      - 'templates/**'
      - 'static/**'
      - 'tests/**'
      - 'playwright.config.js'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased timeout for E2E tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    # Install Python dependencies first
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install test dependencies explicitly
        pip install pytest==7.1.2
        
    # Then handle Node.js and Playwright
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # Only enable caching if package-lock.json exists
        cache: ${{ contains(runner.os, 'Linux') && 'npm' || '' }}
        
    - name: Install Playwright
      run: |
        # Initialize package.json if it doesn't exist
        if [ ! -f package.json ]; then
          echo '{"name": "e2e-tests"}' > package.json
        fi
        
        # Create a temporary package-lock.json if it doesn't exist
        if [ ! -f package-lock.json ]; then
          echo '{"name":"e2e-tests","version":"1.0.0","lockfileVersion":3,"requires":true}' > package-lock.json
        fi
        
        # Install only the necessary Playwright packages
        echo "Installing Playwright..."
        npm install @playwright/test@latest --no-package-lock
        
        # Install only Chromium to save time/space
        echo "Installing Chromium..."
        npx playwright install --with-deps chromium
        
    - name: Kill existing process on port 8000
      run: |
        # Install necessary tools
        sudo apt-get update
        sudo apt-get install -y lsof psmisc
        
        # Kill any process using port 8000
        echo "Killing processes on port 8000..."
        sudo kill -9 $(sudo lsof -ti:8000) 2>/dev/null || true
        
        # Verify port is free
        if lsof -i :8000; then
          echo "Error: Port 8000 is still in use after cleanup"
          exit 1
        fi
        
    - name: Run Flask server
      run: |
        # Set environment variables
        export FLASK_APP=app.py
        export FLASK_ENV=development
        export PYTHONUNBUFFERED=1
        
        # Start Flask server in the background
        echo "Starting Flask server..."
        nohup python -m flask run --port=8000 --no-debugger --no-reload > server.log 2>&1 &
        FLASK_PID=$!
        
        # Function to kill the server when the script exits
        cleanup() {
          echo "Stopping Flask server (PID: $FLASK_PID)"
          kill $FLASK_PID 2>/dev/null
        }
        trap cleanup EXIT
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8000 >/dev/null; then
            echo "Server is up and running!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          fi
          echo "Waiting for server to start... (attempt $i/30)"
          sleep 2
        done
        
    - name: Run E2E tests
      run: |
        npx playwright test --config=playwright.config.js --workers=1
      env:
        BASE_URL: http://localhost:8000
        CI: true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        retention-days: 7
        
    - name: Upload server logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: server-logs
        path: server.log
        retention-days: 7
        
    - name: Show server logs on error
      if: failure()
      run: |
        echo "=== Server Logs ==="
        cat server.log || true
        
        echo "=== Test Results ==="
        find test-results -type f -name "*.txt" -exec echo "=== {} ===" \; -exec cat {} \; || true
