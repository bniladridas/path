name: Docker Build & Push

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx (with retry)
      uses: docker/setup-buildx-action@v3
      with:
        install: true
      timeout-minutes: 5
      continue-on-error: true

    - name: Verify Docker setup
      run: |
        echo "Docker version:"
        docker version
        echo "Available builders:"
        docker buildx ls || echo "Buildx not available, using standard Docker"

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        if docker buildx version >/dev/null 2>&1; then
          echo "Using Docker Buildx"
          docker buildx build \
            --load \
            --tag path-app:test \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            . || {
              echo "Buildx failed, falling back to standard build"
              docker build -t path-app:test .
            }
        else
          echo "Using standard Docker build"
          docker build -t path-app:test .
        fi
        docker images path-app:test

    - name: Create test environment
      run: |
        docker run -d --name path-test \
          -p 8000:8000 \
          -e GEMINI_API_KEY=test-key \
          -e FLASK_DEBUG=1 \
          path-app:test
        docker ps

    - name: Wait for app to start
      run: |
        echo "Waiting for app to start..."
        sleep 10
        docker logs path-test
        timeout 60 bash -c 'until curl -f http://localhost:8000/ > /dev/null 2>&1; do
          echo "Waiting..."; sleep 3;
        done' || {
          echo "App failed to start, checking logs:"
          docker logs path-test
          exit 1
        }

    - name: Run health check
      run: |
        echo "Testing app endpoints..."
        echo "Root endpoint:"
        curl -s http://localhost:8000/ | head -20
        echo -e "\n\nVerify endpoint:"
        if curl -s http://localhost:8000/verify | grep -q "verification"; then
          echo "✅ App is responding correctly"
        else
          echo "❌ App not responding as expected"
          echo "Response content:"
          curl -s http://localhost:8000/verify | head -20
          docker logs path-test
          exit 1
        fi

    - name: Clean up
      run: |
        docker stop path-test || true
        docker rm path-test || true
