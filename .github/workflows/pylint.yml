name: Python & YAML Linting

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-python-yaml:
    name: Python & YAML Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          echo -e "\033[36m[INFO]\033[0m Installing dependencies..."
          python -m pip install --upgrade pip
          pip install pylint yamllint
          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            pip install -r requirements-py38.txt
          else
            pip install -r requirements.txt
          fi
          echo -e "\033[32m[PASS]\033[0m Dependencies installed successfully"
      - name: Lint YAML files
        run: |
          echo -e "\033[36m[INFO]\033[0m Linting YAML files..."
          # Run yamllint on all YAML files except those in .venv and .git directories
          find . -type f \( -name "*.yaml" -o -name "*.yml" \) \
            -not -path "./venv/*" \
            -not -path "./*/venv/*" \
            -not -path "./.git/*" \
            -not -path "./node_modules/*" \
            | xargs yamllint -c .yamllint
          echo -e "\033[32m[PASS]\033[0m YAML linting completed"

      - name: Run pylint
        run: |
          echo -e "\033[36m[INFO]\033[0m Running pylint..."
          # Install pylint-junit for JUnit XML output
          pip install pylint-junit

          # Create a pylint config file
          echo "[MASTER]
          ignore=venv
          ignore-patterns=("*_test.py", "*_tests.py")
          extension-pkg-whitelist=flask
          load-plugins=pylint_flask

          [FORMAT]
          max-line-length=100
          " > .pylintrc

          # Run pylint on all Python files
          find . -name "*.py" -not -path "./venv/*" \
            | xargs pylint --output-format=pylint_junit.JUnitReporter \
            > pylint-results.xml || true
          echo -e "\033[32m[PASS]\033[0m Pylint analysis completed"
