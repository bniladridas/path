name: Vercel Deployment Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-vercel-deployment:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo -e "\033[36m[INFO]\033[0m Upgrading pip and installing dependencies..."
          python -m pip install --upgrade pip
          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            pip install -r requirements-py38.txt
          else
            pip install -r requirements.txt
          fi
          pip install pytest flask

      - name: Validate Vercel configuration
        run: |
          echo -e "\033[36m[INFO]\033[0m Validating vercel.json configuration..."
          if [ ! -f "vercel.json" ]; then
            echo -e "\033[31m[ERROR]\033[0m vercel.json not found"
            exit 1
          fi

          python -m json.tool vercel.json > /dev/null
          echo -e "\033[32m[PASS]\033[0m vercel.json is valid JSON"

          if [ ! -f "path/app.py" ]; then
            echo -e "\033[31m[ERROR]\033[0m path/app.py not found"
            exit 1
          fi
          echo -e "\033[32m[PASS]\033[0m path/app.py exists"

      - name: Test Flask app import
        run: |
          echo -e "\033[36m[INFO]\033[0m Testing Flask app import..."
          cd path
          python -c "
          import sys
          sys.path.insert(0, '..')
          try:
              from app import app
              print('\033[32m[PASS]\033[0m Flask app imported successfully')
              print(f'\033[36m[INFO]\033[0m App name: {app.name}')
              print(f'\033[36m[INFO]\033[0m App routes: {[rule.rule for rule in app.url_map.iter_rules()]}')
          except Exception as e:
              print(f'\033[31m[ERROR]\033[0m Failed to import Flask app: {e}')
              sys.exit(1)
          "

      - name: Test Flask app routes
        run: |
          echo -e "\033[36m[INFO]\033[0m Testing Flask app routes..."
          cd path
          python -c "
          import sys
          sys.path.insert(0, '..')
          from app import app

          with app.test_client() as client:
              response = client.get('/', follow_redirects=True)
              assert response.status_code == 200, \
                  f'Expected 200 after redirect, got {response.status_code} for /'
              print('\033[32m[PASS]\033[0m Home route (/) works (followed redirect)')

              response = client.post('/search')
              assert response.status_code in [200, 400, 405], \
                  f'Expected 200, 400, or 405, got {response.status_code} for /search'
              print('\033[32m[PASS]\033[0m Search route (/search) works')

              routes = [
                  '/terms', '/privacy', '/updates',
                  '/verify', '/bypass-verification'
              ]
              for route in routes:
                  response = client.get(route)
                  assert response.status_code in [200, 302], \
                      f'Expected 200 or 302, got {response.status_code} for {route}'
                  print(f'\033[32m[PASS]\033[0m {route} route works')

          print('\033[32m[PASS]\033[0m All routes tested successfully')
          "

      - name: Simulate Vercel build process
        run: |
          echo -e "\033[36m[INFO]\033[0m Simulating Vercel build process..."
          python --version

          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            pip install -r requirements-py38.txt
          else
            pip install -r requirements.txt
          fi

          if [ -d "static" ]; then
            echo -e "\033[32m[PASS]\033[0m Static files directory found"
            find static -type f -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" | head -5
          fi

          if [ -d "templates" ]; then
            echo -e "\033[32m[PASS]\033[0m Templates directory found"
            find templates -name "*.html" | head -5
          fi

      - name: Test environment variables handling
        run: |
          echo -e "\033[36m[INFO]\033[0m Testing environment variables handling..."
          cd path
          python -c "
          import os
          import sys
          sys.path.insert(0, '..')

          os.environ.pop('GEMINI_API_KEY', None)

          try:
              from app import app
              with app.test_client() as client:
                  response = client.get('/', follow_redirects=True)
                  assert response.status_code == 200
              print('\033[32m[PASS]\033[0m App works without environment variables')
          except Exception as e:
              print(f'\033[31m[ERROR]\033[0m App failed without env vars: {e}')
              sys.exit(1)
          "

      - name: Check for security issues
        run: |
          echo -e "\033[36m[INFO]\033[0m Checking for common security issues..."

          if grep -r "debug=True" path/ --include="*.py"; then
            echo -e "\033[33m[WARN]\033[0m debug=True found in code"
          else
            echo -e "\033[32m[PASS]\033[0m No debug=True found"
          fi

          if grep -r -i "api_key.*=" path/ --include="*.py" | grep -v "environ\\|getenv"; then
            echo -e "\033[33m[WARN]\033[0m Potential hardcoded API keys found"
          else
            echo -e "\033[32m[PASS]\033[0m No hardcoded API keys found"
          fi

      - name: Performance check
        run: |
          echo -e "\033[36m[INFO]\033[0m Running basic performance checks..."
          cd path
          python -c "
          import time
          import sys
          sys.path.insert(0, '..')
          from app import app

          start_time = time.time()
          with app.test_client() as client:
              response = client.get('/')
          end_time = time.time()

          startup_time = (end_time - start_time) * 1000
          print(f'\033[36m[INFO]\033[0m App response time: {startup_time:.2f}ms')

          if startup_time > 5000:
              print('\033[33m[WARN]\033[0m App response time is slow')
          else:
              print('\033[32m[PASS]\033[0m App response time is acceptable')
          "

      - name: Generate deployment report
        run: |
          echo "Deployment Validation Report"
          echo "================================"
          echo -e "\033[36m[INFO]\033[0m Python version: $(python --version)"
          echo -e "\033[32m[PASS]\033[0m Flask app: Importable and functional"
          echo -e "\033[32m[PASS]\033[0m Routes: All routes responding"
          echo -e "\033[32m[PASS]\033[0m Configuration: vercel.json is valid"
          echo -e "\033[32m[PASS]\033[0m Dependencies: All installed successfully"
          echo -e "\033[32m[PASS]\033[0m Security: Basic checks passed"
          echo -e "\033[32m[PASS]\033[0m Performance: Response times acceptable"
          echo ""
          echo -e "\033[32m[SUCCESS]\033[0m Code is ready for Vercel deployment!"

  notify-status:
    needs: validate-vercel-deployment
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment validation status
        run: |
          if [ "${{ needs.validate-vercel-deployment.result }}" == "success" ]; then
            echo -e "\033[32m[SUCCESS]\033[0m All validation checks passed! Code is ready for Vercel deployment."
          else
            echo -e "\033[31m[FAIL]\033[0m Validation checks failed. Please fix issues before deploying to Vercel."
            exit 1
          fi
