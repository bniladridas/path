name: Automated Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  GHCR_REGISTRY: ghcr.io
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_IMAGE: path-app

jobs:
  check-release:
    name: Check if Release Needed
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.semantic.outputs.new-release-published }}
      version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release (dry-run)
        id: semantic
        run: |
          npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  automated-release:
    name: Create Automated Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-release:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: [check-release, automated-release]
    if: needs.check-release.outputs.should-release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.check-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.check-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.check-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push release images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [check-release, automated-release, build-and-push-release]
    if: needs.check-release.outputs.should-release == 'true'

    steps:
      - name: Create success comment
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.check-release.outputs.version }}';
            const body = `Automated Release v${version} Created Successfully

            What was released:
            - GitHub Release created
            - Docker images built and pushed to both registries
            - Changelog updated

            Docker Images:
            - ghcr.io/${{ env.IMAGE_NAME }}:${version}
            - ghcr.io/${{ env.IMAGE_NAME }}:latest
            - harpertoken/${{ env.DOCKER_IMAGE }}:${version}
            - harpertoken/${{ env.DOCKER_IMAGE }}:latest

            Usage:
            docker run -p 8000:8000 ghcr.io/${{ env.IMAGE_NAME }}:${version}`;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
